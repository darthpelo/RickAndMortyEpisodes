# Rick and Morty Episodes App - Project Rules

## Project Overview
This is a SwiftUI iOS application displaying Rick and Morty episodes using the official API. The project follows Test-Driven Development (TDD), SOLID principles, MVVM architecture, comprehensive unit testing, and **localization support** for Dutch and English.

## Three Fundamental Rules
1. **English Documentation**: All code, comments, documentation, and README must be in English
2. **Test-Driven Development (TDD)**: Write tests first, then implement functionality
3. **SOLID Principles**: Apply all five SOLID principles consistently throughout the codebase

## Implementation Status

### Core Requirements (All ✅ FULLY IMPLEMENTED)
- ✅ **Load Rick and Morty episodes**: Official API integration with pagination
- ✅ **Display episodes in list**: SwiftUI list with episode information  
- ✅ **Show episode details**: Dedicated detail screen with character list
- ✅ **Character details**: Modal presentation with character information
- ✅ **Handle API failures**: Comprehensive error handling with retry mechanisms
- ✅ **Loading and error states**: Visual feedback for all application states
- ✅ **Background refresh**: True BGTaskScheduler-based background app refresh
- ✅ **Pagination**: Automatic loading of additional episodes
- ✅ **SOLID principles**: Clean architecture implementation
- ✅ **English documentation**: All documentation in English
- ✅ **Localization**: Dutch + English language support

### Bonus Features (Implemented)
- ✅ **Persistence Mechanism**: Data saved locally with cache
- ✅ **Pull to Refresh**: Refresh mechanism via drag gesture
- ✅ **Unit Tests**: Complete unit tests including background refresh
- ✅ **Localization**: Professional Dutch + English translations

**Note**:

- ❌ **Timestamp**
- ❌ **UI tests**: not implemented due to time constraints, with focus placed on comprehensive unit test coverage and core functionality.

### Character Details Implementation
**Important**: In episode details, only character IDs are displayed (not character names loaded asynchronously). Character names are only shown when user taps on a character ID to view full character details.

## Architecture Components

### MVVM Architecture
- **Models**: Episode, Character, EpisodeResponse (Codable structs)
- **Views**: EpisodeListView, EpisodeDetailView, CharacterDetailView (SwiftUI)
- **ViewModels**: Protocol-based with dependency injection (ObservableObject)
- **Services**: APIService (networking), CacheService (persistence)

### Dependency Injection
- ViewModels depend on protocol abstractions, not concrete implementations
- `EpisodeFetcher`, `EpisodeCache`, `CharacterFetcher` protocols
- Mock implementations for testing

### Background App Refresh
**True Background Refresh Implementation**:
- **BGTaskScheduler**: iOS framework for background task management
- **Task Identifier**: `com.alessioroberto.RickAndMortyEpisodes.refresh`
- **BackgroundTaskManager**: Centralized background task handling
- **Automatic Rescheduling**: Self-managing background task lifecycle
- **Optimized Background Execution**: `performBackgroundRefresh()` method for efficiency

#### Background Refresh Requirements
- Info.plist `UIBackgroundModes`: `["background-fetch"]`
- Info.plist `BGTaskSchedulerPermittedIdentifiers`: `["com.alessioroberto.RickAndMortyEpisodes.refresh"]`
- App registration of background tasks during launch
- BGTaskScheduler task handling and rescheduling

### Localization Architecture

**String Management**:
- **Localizable.xcstrings**: String Catalog with Dutch (nl) + English (en) support
- **LocalizationHelper.swift**: Centralized localized string access
- **Dynamic Format Strings**: Support for parameterized text (e.g., "Status: %@")
- **Complete Coverage**: All user-facing text fully localized

**Supported Languages**:
- **English (en)**: Primary development language
- **Dutch (nl)**: Professional translations included

**Implementation Details**:
- String extraction from all SwiftUI views and ViewModels
- Error messages localized in ViewModels
- Format strings for dynamic content (character count, export messages)
- Real-time language switching support

## Service Layer Details

### APIService
- Official Rick and Morty API integration (`https://rickandmortyapi.com/api`)
- Async/await networking pattern
- Comprehensive error handling (network, parsing, HTTP status)
- Endpoints: `/episode` (with pagination), `/character/{id}`

### CacheService  
- UserDefaults-based local persistence
- Generic caching for episodes and characters
- Data integrity validation and corruption recovery
- Automatic cache refresh mechanisms

### BackgroundTaskManager
- BGTaskScheduler wrapper with comprehensive error handling
- Automatic task registration and rescheduling
- Background execution optimization
- Integration with EpisodeListViewModel for data refresh

## Testing Strategy

#### Test Coverage
- **Unit Tests**: Every ViewModel, Service and utility
- **Background Refresh Tests**: Validation of `performBackgroundRefresh()` method
- **Integration Tests**: Component interactions
- **Mock Tests**: Validation of simulated behaviors
- **Localization Tests**: String catalog and localized string validation

**Note**: UI tests were not implemented due to time constraints. Focus was placed on comprehensive unit test coverage achieving >80% code coverage.

#### Mock Implementations
- `MockEpisodeFetcher`: Simulated API responses with configurable delays
- `MockEpisodeCache`: In-memory caching for testing
- `MockCharacterFetcher`: Character loading simulation
- `PreviewMockFactory`: SwiftUI preview support

## SOLID Principles Implementation

### Single Responsibility Principle (SRP)
- `APIService`: Only API communication
- `CacheService`: Only data persistence  
- `BackgroundTaskManager`: Only background task management
- ViewModels: Only presentation logic for specific views

### Open/Closed Principle (OCP)
- Protocol-based architecture enables extension without modification
- New fetcher implementations can be added without changing existing code
- Background task strategies can be extended via protocols

### Liskov Substitution Principle (LSP)
- Mock implementations fully substitute real services
- Protocol contracts maintained across all implementations

### Interface Segregation Principle (ISP)
- Small, focused protocols (EpisodeFetcher, EpisodeCache, CharacterFetcher)
- ViewModels only depend on methods they actually use

### Dependency Inversion Principle (DIP)
- ViewModels depend on abstractions (protocols), not concrete classes
- High-level modules (ViewModels) don't depend on low-level modules (Services)

## Configuration Requirements

### Info.plist Configuration
```xml
<key>UIBackgroundModes</key>
<array>
    <string>background-fetch</string>
</array>
<key>BGTaskSchedulerPermittedIdentifiers</key>
<array>
    <string>com.alessioroberto.RickAndMortyEpisodes.refresh</string>
</array>
```

### Project Configuration
- iOS Deployment Target: 18.0+
- Swift Version: 5.9+
- Xcode Version: 15.0+
- Localization Development Region: English
- Supported Localization Regions: English, Dutch

## Quality Standards
- All code documented with English comments
- Comprehensive unit test coverage (>80%)
- Error handling for all failure scenarios
- Clean architecture with separation of concerns
- Performance optimization with lazy loading and caching
- Professional localization for Dutch market
- Background refresh respecting iOS system resources

## Localization Features (✅ FULLY IMPLEMENTED)
- ✅ **Dutch + English Support**: Complete String Catalog (.xcstrings) implementation
- ✅ **Professional Translations**: All user-facing text properly localized
- ✅ **Date Localization**: Automatic date formatting following system locale
- ✅ **Error Message Localization**: Localized error states throughout app
- ✅ **Dynamic Language Switching**: Real-time language switching based on system settings

**Technical Implementation**: Centralized LocalizedString enum with formatters that respect system locale for dates and proper localization key management.

---

*This document represents the rules and guiding principles for the development of the Rick and Morty Episodes app. It must be strictly followed throughout the entire development cycle.*

alwaysApply: true
---
